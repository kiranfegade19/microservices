
server:
  port: 8010
spring:
  application:
    name: users

#  datasource:
#    url: jdbc:mysql://mysql.default.svc.cluster.local:3306/usersdb
#    username: root
#    password: root

  datasource:
    url: jdbc:h2:mem:usersdb
    username: sa
    password: ""
  jpa:
    show-sql: true
    database-platform: org.hibernate.dialect.H2Dialect
  sql:
    init:
      mode: always
  config:
    import: "optional:configserver:http://configurations:8000/"
  rabbitmq:
    host: "localhost"
    port: 5672
    username: "user"
    password: "p7ep6mRggqWM7xC8"
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
    function:
      definition: updateCommunication
    stream:
      default-binder: kafka
      bindings:
        updateCommunication-in-0:
          destination: communication-sent
          group: ${spring.application.name}
          binder: kafka
        sendCommunication-out-0:
          destination: send-communication
          binder: kafka
      kafka:
        binder:
          brokers:
            - localhost:9092


#      binders:
#        kafka:
#          type: kafka
#          environment:
#            spring:
#              cloud:
#                stream:
#                  kafka:
#                    binder:
#                      brokers:
#                        - localhost:9092
#        rabbit:
#          type: rabbit
#          environment:
#            spring:
#              cloud:
#                stream:
#                  rabbit:
#                    binder:
#                      brokers:
#                        - localhost:5672

springdoc:
  api-docs:
    path: "/users/v3/api-docs/swagger-config"

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

endpoint:
  shutdown:
    enabled: true

eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: "http://eureka-servicediscovery:8001/eureka/"


info:
  app:
    name: users
    description: "SmallBank users service"
    version: "1.0.0"

logging:
  level:
    com:
      org:
        users:
          users: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"


resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000

resilience4j.retry:
  configs:
    default:
      maxRetryAttempts: 3
      waitDuration: 500
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000
      limitRefreshPeriod: 5000
      limitForPeriod: 1


